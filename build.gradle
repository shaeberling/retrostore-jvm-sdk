buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
  }
}

plugins {
  id 'java'
  id 'maven-publish'
  id 'com.google.protobuf' version '0.8.18'
}

repositories {
  mavenCentral()
}

dependencies {
  // compile project(':client-common')
  implementation 'com.google.guava:guava:20.0'
  implementation 'com.google.code.gson:gson:2.8.0'
  implementation 'com.google.protobuf:protobuf-lite:3.0.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


protobuf {
  protoc {   
    artifact = "com.google.protobuf:protoc:3.0.0"
  }
  plugins {
    javalite {
      artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
    }
  }
  // This will generate the protobuf files into the regular source tree.
  // I wasn't able to keep them separate (e.g. in project/gen) and then
  // have IntelliJ still play nicely. Would love to revisit this, if
  // anybody is reading this and has an idea. But for now, this works
  // pretty nicely.
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        remove java
      }
      task.plugins {
        javalite {
          outputSubDir = "java"
        }
      }
    }
  }
  generatedFilesBaseDir = "$projectDir/src"
}
clean {
    delete "$projectDir/src/main/java/org/retrostore/client/common/proto"
}


version = '0.2.10'
group = 'org.retrostore'

jar {
  manifest {
    attributes 'Implementation-Title': 'Retrostore Client Library',
               'Implementation-Version': version
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'retrostore-client'
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'RetroStore Client API'
        url = 'https://retrostore.org'
      }
    }
  }

  repositories {
    maven {
      // change URLs to point to your repos, e.g. http://my.org/repo
      def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
      def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}
